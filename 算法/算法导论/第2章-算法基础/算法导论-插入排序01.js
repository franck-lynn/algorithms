function insertionSort(a) {
    // j[1-a.length]为手中已排号序的牌
    for(var j = 1; j < a.length; j++){
        // 下标j表示正在被插入到手中的"当前牌"
        // 在内循环中.这个值是不能变的
        var key = a[j];
        // 手上最后一张牌
        var i = j-1;
        // 寻找条件插入.从手上最后一张牌开始查找,一直找到第1张牌
        // 如果手上排好序的牌最后一张牌 > 当前牌,说明当前牌小,需要插入
        // 因为j是从1开始,要使 j 与手上所有牌(0~j-1)都比较到,i=j-1的范围就是(0~j-1),所以要有i>=0的要求
        while (i >= 0 && a[i] > key){
            // 所谓插入,就是当前牌要去占位置,也就是说,最后一张牌要向右移动一位,i+1位由最后一张牌占用
            a[i+1] = a [i];
            // 接着再比较手上倒数第2张牌
            i = i-1;
        }
        // 此时i+1是上面i的排位,由当前牌占用
        a[i+1] = key;
    }
    return a
}

var a = [8,2,4,9,3,6];
console.log(insertionSort(a))
