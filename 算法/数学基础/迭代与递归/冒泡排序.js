/**
 [2,  7,  3,  1,  6,  5]
 l               r
 i   i+1
 [2,  7,  3,  1,  6,  5]
      i   i+1
 ... 
 [2,  3,  1,  6,  5,  7]
                     最后一个数组的顺序是排好的
*/
function bubble(a, l, r) {
    // 关键点1: 递归出口
    if (l < r) {
        // 关键点2: 先排好最后一个数, r 是数组的长度, r -1 是数组最后一个下标
        //         i<r-1, i最大值只能到4, 因为 i<5 随着i的递增, 完成了第1轮
        //         的冒泡, 确定了最后一个数组的位置, 即是最大值
        // 关键点3: 计算i值范围, ∵ i+1<r, ∴ i<r-1
        //         当两个数组同时从左往右步进时, 用这种方法计算范围
        for (let i = 0; i < r - 1; i++) {
            if (a[i] > a[i + 1]) {
                let tmp = a[i]
                a[i] = a[i + 1]
                a[i + 1] = tmp
            }
        }
        // 这里的r-1是除掉数组的最后一个的小范围的数组再冒泡, 
        // 这样就实现了递归
        bubble(a, l, r - 1)
    }
    return a
}
var arr = [2, 7, 3, 1, 6, 5]
// console.log(arr.length) // 6
console.log(bubble(arr, 0, arr.length))