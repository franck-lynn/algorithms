/*
https://www.cnblogs.com/ECJTUACM-873284962/p/6935506.html
在计数排序的算法中,假设输入的是一个数组a[0..n-1],a.length=n;我们
需要两个数组.
b[0..n-1]存放排序的输出
c[0..k]提供临时存储空间,
元素是0..k区间的一个整数
 */
function countingSort(a, b, k) {
    console.log("输入的数组  a:", a);
    let c = [];
    // k是桶数组的长度,因为所有元素不大于5,所以c数组长度取6即可
    // 即 k = 6;
    for (let i = 0; i < k; i++) {
        c[i] = 0
    }
    // console.log("数组初始化c:", c);

    // 遍历输入的数组a,a[j]是a数组的元素,这个元素作为下标
    // c[a[j]] 是c数组中的元素,下标是a数组元素,值为出现的次数
    for (let j = 0; j < a.length; j++) {
        // a[0]=2,表示0出现了2次
        // a[1]=0,表示1没有出现
        c[a[j]] = c[a[j]] + 1;
    }
    // console.log("数组c中的元素表示a数组中元素出现的次数:", c);
    // [ 2, 0, 2, 3, 0, 1 ]
    for (let i = 1; i < k; i++) {
        // c[i]是出现的次数,i是a元素的值,前面的i实际是后面的i加1
        // c[1]=c[1]+c[0],表示小于1的元素有多少个,小于1的元素有2个
        // c[2]=c[2]+c[1]=0+2=2,表示小于2的元素有2个
        // c[3]=c[3]+c[2]=2+2=4,表示小于3的元素有4个
        // c[4]=c[4]+c[3]=3+4=7,表示小于4的元素有7个,...
        c[i] = c[i] + c[i - 1]
    }
    console.log(c)
    // console.log("数组c现在表示a中小于相应下标元素出现的次数:", c);
    
    // console.log("🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗");
    for (let j = a.length - 1; j >= 0; j--) {
        /*
         j=7,a[7]=3,c[3-1=2]=3,表示<=3的元素出现了4次,现在的数组为:[2,2,4,7,7,8 ]
         j=6,a[6]=0,c[0-1=-1]=0,表示<=0的元素出现了undefined次,现在的数组为:[2,2,4,6,7,8 ]
         j=5,a[5]=3,c[3-1=2]=3,表示<=3的元素出现了4次,现在的数组为:[1,2,4,6,7,8 ]
         j=4,a[4]=2,c[2-1=1]=2,表示<=2的元素出现了2次,现在的数组为:[1,2,4,5,7,8 ]
         j=3,a[3]=0,c[0-1=-1]=0,表示<=0的元素出现了undefined次,现在的数组为:[1,2,3,5,7,8 ]
         j=2,a[2]=3,c[3-1=2]=3,表示<=3的元素出现了3次,现在的数组为:[0,2,3,5,7,8 ]
         j=1,a[1]=5,c[5-1=4]=5,表示<=5的元素出现了7次,现在的数组为:[0,2,3,4,7,8 ]
         j=0,a[0]=2,c[2-1=1]=2,表示<=2的元素出现了2次,现在的数组为:[0,2,3,4,7,7 ] 
          */
        // console.log(`🔴j=${j}, a[${j}]=${a[j]}, c[${a[j]}-1=${a[j] - 1}]=${a[j]},表示<=${a[j]}的元素出现了${c[a[j] - 1]}次,现在的数组为:\[${c} \]`);
        // 从上面的分析可以看出:按照b数组的下标从0开始
        // b[3]实际上应该是下标2的元素,它等于b[2]=a[j]=2
        b[c[a[j]] - 1] = a[j];
        /*
         🔴j=7, a[7]=3, c[3-1=2]=3,表示<=3的元素出现了4次,现在的数组为:[2,2,4,7,7,8 ]
         🔶j=7, a[7]=3, c[3]=2, 数组为:[2,2,4,6,7,8]
         🔴j=6, a[6]=0, c[0-1=-1]=0,表示<=0的元素出现了undefined次,现在的数组为:[2,2,4,6,7,8 ]
         🔶j=6, a[6]=0, c[0]=-1, 数组为:[1,2,4,6,7,8]
         🔴j=5, a[5]=3, c[3-1=2]=3,表示<=3的元素出现了4次,现在的数组为:[1,2,4,6,7,8 ]
         🔶j=5, a[5]=3, c[3]=2, 数组为:[1,2,4,5,7,8]
         🔴j=4, a[4]=2, c[2-1=1]=2,表示<=2的元素出现了2次,现在的数组为:[1,2,4,5,7,8 ]
         🔶j=4, a[4]=2, c[2]=1, 数组为:[1,2,3,5,7,8]
         🔴j=3, a[3]=0, c[0-1=-1]=0,表示<=0的元素出现了undefined次,现在的数组为:[1,2,3,5,7,8 ]
         🔶j=3, a[3]=0, c[0]=-1, 数组为:[0,2,3,5,7,8]
         🔴j=2, a[2]=3, c[3-1=2]=3,表示<=3的元素出现了3次,现在的数组为:[0,2,3,5,7,8 ]
         🔶j=2, a[2]=3, c[3]=2, 数组为:[0,2,3,4,7,8]
         🔴j=1, a[1]=5, c[5-1=4]=5,表示<=5的元素出现了7次,现在的数组为:[0,2,3,4,7,8 ]
         🔶j=1, a[1]=5, c[5]=4, 数组为:[0,2,3,4,7,7]
         🔴j=0, a[0]=2, c[2-1=1]=2,表示<=2的元素出现了2次,现在的数组为:[0,2,3,4,7,7 ]
         🔶j=0, a[0]=2, c[2]=1, 数组为:[0,2,2,4,7,7]
          */
        c[a[j]] = c[a[j]] - 1;
        //console.log(`🔶j=${j}, a[${j}]=${a[j]}, c[${a[j]}]=${a[j]-1}, 数组为:[${c}]`)
    }
    //console.log("🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗🔗");
    console.log("排序后的数组b:", b)
}

const a = [9,8, 7, 6, 5, 4, 3, 2, 1 ];
const b = [];
const k = 10;
countingSort(a, b, k);
